import numpy as np
import cv2 as cv
from sklearn.cluster import KMeans

import matplotlib.pyplot as plt

import src.lab4.utils as utils


# –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ç—É—Ç –ø—Ä–æ—Å—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–¥–æ –Ω–∞–≤–µ—Ä–Ω–æ (–∫–∞–∫ –±–∏–Ω–∞—Ä–∏–∑–æ–≤–∞–ª–∏ —Ç–∏–ø))
def binarize(image: np.ndarray):
    def singleThresholdBinarize(threshold):
        _, result = cv.threshold(image, threshold, 255, cv.THRESH_BINARY)
        return result

    def doubleThresholdBinarize(low_threshold, high_threshold):
        _, low = cv.threshold(image, low_threshold, 255, cv.THRESH_BINARY)
        _, high = cv.threshold(image, high_threshold, 255, cv.THRESH_BINARY_INV)
        result = cv.bitwise_and(low, high)
        return result

    def otsuBinarize():
        _, result = cv.threshold(image, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU)
        return result

    def adaptiveBinarize(block_size=11, constant=2):
        result = cv.adaptiveThreshold(image, 255,
                                            cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY, block_size, constant)
        return result

    image = cv.cvtColor(image, cv.COLOR_BGR2GRAY)

    single = singleThresholdBinarize(140)
    double = doubleThresholdBinarize(100, 200)
    otsu = otsuBinarize()
    adaptive = adaptiveBinarize(11)

    utils.showImage(single, "–ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è")
    utils.showImage(double, "–î–≤–æ–π–Ω–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è")
    utils.showImage(otsu, "–ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–º –û—Ç—Å—É")
    utils.showImage(adaptive, "–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è")


# –≠—Ç–æ –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å –ª–∏—Ü–æ–º (–ü–æ –í–µ–±–µ—Ä—É –¥–µ–ª–∞–ª)
def segmentByVeber(image, window_size=15, constant=0.03):
    segmentedImage = np.zeros_like(image)
    height, width, _ = image.shape
    halfWindow = window_size // 2

    for y in range(halfWindow, height - halfWindow):
        for x in range(halfWindow, width - halfWindow):
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤ –æ–∫–Ω–µ
            windowMean = np.mean(image[y - halfWindow:y + halfWindow + 1, x - halfWindow:x + halfWindow + 1])

            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ä–æ–≥ –ø–æ –º–µ—Ç–æ–¥—É –í–µ–±–µ—Ä–∞
            threshold = windowMean * (1 - constant)

            # –°–µ–≥–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª—å
            if np.all(image[y, x] <= threshold):
                segmentedImage[y, x] = 0
            else:
                segmentedImage[y, x] = 255

    return segmentedImage


# –¢—Ä–µ—Ç—å–µ –∑–∞–¥–∞–Ω–∏–µ (–ø–æ –º–µ—Ç–æ–¥—É ùëò-—Å—Ä–µ–¥–Ω–∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ)
def segmentImageKmeansLab(image, k):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ BGR –≤ CIE Lab
    labImage = cv.cvtColor(image, cv.COLOR_BGR2LAB)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è k-—Å—Ä–µ–¥–Ω–∏—Ö
    pixelValues = labImage.reshape((-1, 3))

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ k-—Å—Ä–µ–¥–Ω–∏—Ö
    kmeans = KMeans(n_clusters=k, random_state=0).fit(pixelValues)
    segmentedImage = kmeans.cluster_centers_[kmeans.labels_]

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    segmentedImage = segmentedImage.reshape(image.shape).astype(np.uint8)

    return segmentedImage


# –ù—É –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
def segmentTexture(path):
    image = cv.imread(path, cv.IMREAD_GRAYSCALE)

    # —ç–Ω—Ç—Ä–æ–ø–∏—è
    E = cv.GaussianBlur(image, (5, 5), 0)
    E = cv.convertScaleAbs(E)
    Eim = cv.normalize(E, None, 0, 255, cv.NORM_MINMAX)
    Eim = cv.convertScaleAbs(Eim)

    # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è —ç–Ω—Ç—Ä–æ–ø–∏–∏
    _, BW1 = cv.threshold(Eim, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU)
    BWao = cv.morphologyEx(BW1, cv.MORPH_OPEN, np.ones((9, 9), np.uint8))

    # –ó–∞–ª–∏–≤–∞–µ–º —á—ë—Ä–Ω—ã–º
    Mask1 = cv.bitwise_not(BWao)
    contours, _ = cv.findContours(Mask1, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
    for contour in contours:
        cv.drawContours(Mask1, [contour], 0, 255, -1)

    # –ì—Ä–∞–Ω–∏—Ü—ã
    boundary = cv.Canny(Mask1, 100, 200)
    segmentResults = cv.cvtColor(image, cv.COLOR_GRAY2BGR)
    segmentResults[boundary != 0] = (0, 0, 255)

    # –í—Ç–æ—Ä–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞
    I2 = image.copy()
    I2[Mask1 == 255] = 0
    E2 = cv.GaussianBlur(I2, (5, 5), 0)
    E2 = cv.convertScaleAbs(E2)
    E2im = cv.normalize(E2, None, 0, 255, cv.NORM_MINMAX)
    E2im = cv.convertScaleAbs(E2im)

    # –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
    _, BW2 = cv.threshold(E2im, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU)

    Mask2 = cv.morphologyEx(BW2, cv.MORPH_OPEN, np.ones((9, 9), np.uint8))

    contours, _ = cv.findContours(Mask2, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
    for contour in contours:
        cv.drawContours(Mask2, [contour], 0, 255, -1)

    # –≥—Ä–∞–Ω–∏—Ü—ã 2
    boundary2 = cv.Canny(Mask2, 100, 200)

    # —Ä–∏—Å—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    texture1 = cv.cvtColor(image, cv.COLOR_GRAY2BGR)
    texture1[Mask2 != 255] = 255

    texture2 = image.copy()
    texture2[Mask2 == 255] = 255

    return texture1, segmentResults, texture2, Mask1, Mask2


# –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ—Ä—Ö–Ω–µ—ë —Ñ—É–Ω–∫—Ü–∏–∏
def printTextureParams(texture, tag):
    hist = cv.calcHist([texture], [0], None, [256], [0, 256])

    # –û–±–Ω—É–ª—è–µ–º –±–µ–ª—ã–π, —Ç–∞–∫ –∫–∞–∫ –∏–º–µ–µ–º –µ–≥–æ –Ω–∞ –º–µ—Å—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã
    hist[255] = 0

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—ë—Ö "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö" –ø–∏–∫—Å–µ–ª–µ–π (–Ω–∞ —á–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—ã–ª–∞ –¥—Ä—É–≥–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞)
    pixelsCount = int(np.sum(hist))
    print(f"–í—Å–µ–≥–æ \"–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö\" –ø–∏–∫—Å–µ–ª–µ–π –≤ {tag} - {pixelsCount}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–∏–∫—Å–µ–ª–µ–π –≤ {tag} - {texture.shape[0] * texture.shape[1]}")

    def calcM():
        m = 0
        for i in range(0, 255):
            m += hist[i][0] * i / pixelsCount
        return m

    def calcMu(n, m):
        mu = 0
        for i in range(0, 255):
            zi = hist[i][0]
            pz = zi / pixelsCount
            mu += (i - m) ** n * pz

        return mu

    M = calcM()
    print(f"m = {M}")

    sigmaSquared = calcMu(2, M)
    s = sigmaSquared ** 0.5
    print(f"s = {s}")

    R = 1 - 1 / (1 + sigmaSquared / 255**2)
    print(f'R = {R}')

    plt.figure(figsize=(10, 6))
    plt.plot(hist, color="blue")
    plt.title("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã " + tag)
    plt.show()


def main():
    def firstPart():
        image = utils.loadDefaultImage()

        utils.showImage(image, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        binarize(image)

    def secondPart():
        faceImage = utils.loadFaceImage()
        veber = segmentByVeber(faceImage)
        utils.showImage(faceImage, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        utils.showImage(veber, "–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–º –í–µ–±–µ—Ä–∞")

    def thirdPart():
        coloredImage = utils.loadColoredImage()
        result = segmentImageKmeansLab(coloredImage, 5)
        utils.showImage(coloredImage, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        utils.showImage(result, "–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –º–µ—Ç–æ–¥—É k-—Å—Ä–µ–¥–Ω–∏—Ö")

    def fourthPart():
        texture = utils.loadTextureImage()
        #utils.showImage(texture, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        texture1, segmentResults, texture2, Mask1, Mask2 = segmentTexture(utils.texturesPath)
        utils.showImage(texture1, "–ü–µ—Ä–≤–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞")
        # utils.showImage(segmentResults, "–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
        utils.showImage(texture2, "–í—Ç–æ—Ä–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞")
        # utils.showImage(Mask1, "–ü–µ—Ä–≤–∞—è –º–∞—Å–∫–∞")
        # utils.showImage(Mask2, "–í—Ç–æ—Ä–∞—è –º–∞—Å–∫–∞")

        printTextureParams(texture1, "(1)")
        print("\n\n")
        printTextureParams(texture2, "(2)")

    fourthPart()


